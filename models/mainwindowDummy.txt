<!-- For main header -->
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QPushButton>
#include <QStackedWidget>
#include <QVBoxLayout>
#include <QWidget>

class MainWindow : public QMainWindow {
  Q_OBJECT

public:
  explicit MainWindow(QWidget *parent = nullptr);
  ~MainWindow();

private slots:
  void navigateToPage(int pageIndex);

private:
  QWidget *menuWidget;
  QStackedWidget *stackedWidget;

  void leftPanel();
  void constantValuesPage();
  void trainParameterPage();
  void runningParameterPage();
  void trackParameterPage();
  void electricalParameterPage();
};

#endif


<!-- For main page -->

#include "mainwindow.h"
#include "../pages/trainParameterPage.h"
#include "../widgets/InputWidget.h"
#include <QGridLayout>
#include <QLabel>
#include <QLineEdit>
#include <qapplication.h>
#include <qgroupbox.h>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), menuWidget(new QWidget(this)),
      stackedWidget(new QStackedWidget(this)) {
  qApp->setStyleSheet(R"(
    QWidget {
        background-color: white;
        color: black;
    }
    QGroupBox {
        border: 1px solid gray;
        border-radius: 5px;
        margin-top: 20px;
    }
    QGroupBox::title {
        subcontrol-origin: border;
        subcontrol-position: top left;
        background-color: white;
        padding: 0 5px;
        position: relative;
        left: 20px;
        top: -8px;
    }
)");

  QWidget *centralWidget = new QWidget(this);
  QHBoxLayout *mainLayout = new QHBoxLayout(centralWidget);

  leftPanel();
  constantValuesPage();
  trainParameterPage();
  runningParameterPage();
  trackParameterPage();
  electricalParameterPage();

  // Tambahkan menu dan konten ke layout utama
  mainLayout->addWidget(menuWidget);
  mainLayout->addWidget(stackedWidget);
  mainLayout->setStretch(0, 1); // Menu 1 bagian
  mainLayout->setStretch(1, 4); // Konten 4 bagian

  setCentralWidget(centralWidget);
}

MainWindow::~MainWindow() {}

void MainWindow::leftPanel() {
  menuWidget->setStyleSheet("background-color: #35476f;");

  QVBoxLayout *menuLayout = new QVBoxLayout(menuWidget);

  QStringList menuItems = {"Constant Value",       "Train Parameter",
                           "Running Parameter",    "Track Parameter",
                           "Electrical Parameter", "Export"};

  QStringList objectNames = {
      "constantValueButton",       "trainParameterButton",
      "runningParameterButton",    "trackParameterButton",
      "electricalParameterButton", "exportButton"};

  for (int i = 0; i < menuItems.size(); ++i) {
    QPushButton *menuButton = new QPushButton(menuItems[i], this);
    menuButton->setObjectName(objectNames[i]);
    menuButton->setStyleSheet(
        "text-align: left; padding: 10px; font-size: 14px;"
        "background-color: transparent; color: white; border: none;");
    menuLayout->addWidget(menuButton);

    connect(menuButton, &QPushButton::clicked, this,
            [this, i]() { navigateToPage(i); });
  }
  menuLayout->addStretch();
  menuWidget->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding);
}

void MainWindow::constantValuesPage() {
  QWidget *formPage1 = new QWidget(this);
  QVBoxLayout *layout = new QVBoxLayout(formPage1);

  QGroupBox *groupBox = new QGroupBox("Constant Values", this);
  QGridLayout *gridLayout = new QGridLayout(groupBox);

  QLabel *labelGravitation = new QLabel("Gravitation", this);
  QLineEdit *inputGravitation = new QLineEdit(this);
  inputGravitation->setText("9.8");
  inputGravitation->setReadOnly(true);
  inputGravitation->setStyleSheet("background-color: #f5f5f5;");

  QLabel *labelConversion = new QLabel("m/s to km/h", this);
  QLineEdit *inputConversion = new QLineEdit(this);
  inputConversion->setText("3.6");
  inputConversion->setReadOnly(true);
  inputConversion->setStyleSheet("background-color: #f5f5f5;");

  gridLayout->addWidget(labelGravitation, 0, 0);
  gridLayout->addWidget(inputGravitation, 0, 1);
  gridLayout->addWidget(new QLabel("m/s²", this), 0, 2);

  gridLayout->addWidget(labelConversion, 1, 0);
  gridLayout->addWidget(inputConversion, 1, 1);
  gridLayout->addWidget(new QLabel("km/h", this), 1, 2);

  layout->addWidget(groupBox);

  stackedWidget->addWidget(formPage1);
}

void MainWindow::trainParameterPage() {
  TrainParameterWidget *trainParameterWidget = new TrainParameterWidget(this);

  stackedWidget->addWidget(trainParameterWidget);
}

void MainWindow::runningParameterPage() {
  QWidget *formPage = new QWidget(this);
  QGridLayout *formLayout = new QGridLayout(formPage);

  QStringList labels = {"Starting Resistance",
                        "Acceleration",
                        "Deceleration",
                        "Difference Coasting Speed",
                        "Weakening Point 1 (Powering)",
                        "Weakening Point 2 (Powering)",
                        "Weakening Point 3 (Braking)",
                        "Weakening Point 4 (Braking)"};

  QStringList unitLabels = {"",     "m/s²", "m/s²", "km/h",
                            "km/h", "km/h", "km/h", "km/h"};

  for (int i = 0; i < labels.size(); ++i) {
    QLabel *label = new QLabel(labels[i], this);
    QLineEdit *input = new QLineEdit(this);

    formLayout->addWidget(label, i / 2, (i % 2) * 2);
    formLayout->addWidget(input, i / 2, (i % 2) * 2 + 1);
    formLayout->addWidget(new QLabel(unitLabels[i], this), i / 2,
                          (i % 2) * 2 + 1);
  }
  stackedWidget->addWidget(formPage);
}

void MainWindow::trackParameterPage() {
  QWidget *formPage = new QWidget(this);
  QGridLayout *formLayout = new QGridLayout(formPage);

  QStringList labels = {"Number of Station", "Station Distance"};

  for (int i = 0; i < labels.size(); ++i) {
    QLabel *label = new QLabel(labels[i], this);
    QLineEdit *input = new QLineEdit(this);

    formLayout->addWidget(label, i / 2, (i % 2) * 2);
    formLayout->addWidget(input, i / 2, (i % 2) * 2 + 1);
  }
  stackedWidget->addWidget(formPage);
}

void MainWindow::electricalParameterPage() {
  InputWidget *inputWidget = new InputWidget(
      "Teks yang sangat panjang untuk pengujian", "aifojofiasj", this);

  stackedWidget->addWidget(inputWidget);
}

void MainWindow::navigateToPage(int pageIndex) {
  stackedWidget->setCurrentIndex(pageIndex);
}


<!-- For buttons debug -->
#include "mainwindow.h"
#include "../resources/inputType.h"
#include "../widgets/buttonAction.h"
#include "../widgets/buttonSidebarActive.h"
#include "../widgets/leftPanel.h"
#include <QVBoxLayout>

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent) {
  QWidget *centralWidget = new QWidget(this);
  setCentralWidget(centralWidget);
  QVBoxLayout *mainLayout = new QVBoxLayout(centralWidget);
  centralWidget->setLayout(mainLayout);

  InputType inputType("input", "Mass per One Trainset", "ton");
  InputType dropdownType("dropdown", "Number of Trainsets");
  InputType uploadType("upload", "Import Trainset Data");
  InputType invalidType("hahaha", "Testing", "fjsa");

  LeftPanel *leftPanel = new LeftPanel(this);

  // InputWidget *inputWidget = new InputWidget(inputType, this);
  // mainLayout->addWidget(inputWidget);

  // InputWidget *dropdownWidget = new InputWidget(dropdownType, this);
  // mainLayout->addWidget(dropdownWidget);

  // InputWidget *invalidWidget = new InputWidget(invalidType,this);
  // mainLayout->addWidget(invalidWidget);

  // InputWidget *uploadWidget = new InputWidget(uploadType, this);

  // ButtonAction *saveButton = new ButtonAction("Save this data", "", this);
  // connect(saveButton, &ButtonAction::clicked, this,
  //         [this]() { qDebug() << "Submit button clicked"; });
  // ButtonAction *runButton = new ButtonAction("Run", "icon", this);
  // connect(runButton, &ButtonAction::clicked, this,
  //         [this]() { qDebug() << "Run button clicked"; });
  // ButtonAction *saveFileButton = new ButtonAction("Save all data", "", this);
  // connect(saveFileButton, &ButtonAction::clicked, this,
  //         [this]() { qDebug() << "Save all data button clicked"; });
  // mainLayout->addWidget(saveButton);
  // mainLayout->addWidget(runButton);
  // mainLayout->addWidget(saveFileButton);

  // ButtonSidebarActive *constantValuesButton =
  //     new ButtonSidebarActive("runningActive", "", this);
  // connect(constantValuesButton, &ButtonAction::clicked, this,
  //         [this]() { qDebug() << "Submit button clicked"; });
  // ButtonSidebarActive *trainParameterButton =
  //     new ButtonSidebarActive("trainActive", "Train Parameter", this);
  // ButtonSidebarActive *runningParameterButton =
  //     new ButtonSidebarActive("runningActive", "Running Parameter", this);
  // ButtonSidebarActive *trackParameterButton =
  //     new ButtonSidebarActive("trackActive", "Track Parameter", this);
  // ButtonSidebarActive *electricalParameterButton =
  //     new ButtonSidebarActive("electricalActive", "Electrical Parameter",
  //     this);
  // ButtonSidebarActive *outputButton =
  //     new ButtonSidebarActive("outputActive", "Output", this);
  // mainLayout->addWidget(constantValuesButton);
  // mainLayout->addWidget(trainParameterButton);
  // mainLayout->addWidget(runningParameterButton);
  // mainLayout->addWidget(trackParameterButton);
  // mainLayout->addWidget(electricalParameterButton);
  // mainLayout->addWidget(outputButton);
}

MainWindow::~MainWindow() {}

void MainWindow::navigateToPage(int pageIndex) {
  stackedWidget->setCurrentIndex(pageIndex);
}
